Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:
Input: digits = ""
Output: []
Example 3:
Input: digits = "2"
Output: ["a","b","c"]
 
Constraints:
0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].



class Solution {
void solve (int ind,string digits, string mapping[],string output,vector<string>& res){
    
    if(ind>=digits.length()){
        res.push_back(output);
        return;
    }

    int num=digits[ind]-'0';
    string val= mapping[num];

    for(int i=0;i<val.length();i++){
        output.push_back(val[i]);
        solve(ind+1,digits,mapping,output,res);
        output.pop_back();
    }
}

public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.length()==0) return res;

        string output="";
        string mapping[]={" "," ","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};

        solve(0,digits,mapping,output,res);
        return res;
    }
};
